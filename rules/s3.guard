let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

rule S3_Bucket_Encryption when %s3_buckets !empty {
    %s3_buckets.Properties.BucketEncryption exists
    %s3_buckets.Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm in ["aws:kms","AES256"]
}

rule S3_Bucket_PublicAccess when %s3_buckets !empty {
    %s3_buckets.Properties.PublicAccessBlockConfiguration exists
    %s3_buckets.Properties.PublicAccessBlockConfiguration {
        BlockPublicAcls == true
        BlockPublicPolicy == true
        IgnorePublicAcls == true
        RestrictPublicBuckets == true
    }
}

rule S3_Bucket_AccessControl when %s3_buckets !empty {
    when %s3_buckets.Properties.AccessControl exists {
        %s3_buckets.Properties.AccessControl in ["Private","LogDeliveryWrite","BucketOwnerRead","BucketOwnerFullControl"]
    }
}

let s3_bucket_policies = Resources.*[ Type == 'AWS::S3::BucketPolicy' ]

rule S3_BucketPolicy_NonTLS when %s3_bucket_policies !empty {
    %s3_bucket_policies.Properties.PolicyDocument.Statement.* == {"Action":"s3:*","Condition":{"Bool":{"aws:SecureTransport":false}},"Effect":"Deny","Principal":"*","Resource":"*"}
}
