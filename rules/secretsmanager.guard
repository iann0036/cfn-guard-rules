let secretsmanager_resourcepolicies = Resources.*[ Type == 'AWS::SecretsManager::ResourcePolicy' ]

rule SecretsManager_ResourcePolicy_ResourcePolicy when %secretsmanager_resourcepolicies !empty {
    %secretsmanager_resourcepolicies.Properties.BlockPublicPolicy == true <<Secrets Manager policies must explicitely block public access>>

    %secretsmanager_resourcepolicies.Properties.ResourcePolicy is_struct <<Inline policies are not permitted, use an object instead>>
    %secretsmanager_resourcepolicies.Properties.ResourcePolicy {
        Version == "2012-10-17" <<Version must be 2012-10-17>>
        Statement is_list <<Statement must be a list>>
        Statement[*] {
            this is_struct <<Statement items must be an object>>
            when Effect != "Deny" {
                NotPrincipal !exists <<NotPrincipal should not be used in an Allow statement to prevent overly permissive permissions>>
                Principal is_struct <<Principal should not be an object and must not be a wildcard>>
                Principal.Federated !exists <<Federated access to this resource is not permitted>>
                when Principal.AWS exists {
                    Principal.AWS == /^(arn:aws:iam::\d{12}:.+|\d{12}|arn:aws:sts::\d{12}:assumed-role\/.+)$/ <<Principal must not have wildcards>>
                }
            }
        }
    }
}
