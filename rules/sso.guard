let sso_permissionsets = Resources.*[ Type == 'AWS::SSO::PermissionSet' ]

rule SSO_PermissionSet_InlinePolicy when %sso_permissionsets !empty {
    when %sso_permissionsets.Properties.InlinePolicy exists {
        %sso_permissionsets.Properties.InlinePolicy is_struct <<Inline policies are not permitted, use an object instead>>
        %sso_permissionsets.Properties.InlinePolicy {
            Version == "2012-10-17" <<Version must be 2012-10-17>>
            Statement is_list <<Statement must be a list>>
            Statement[*] {
                this is_struct <<Statement items must be an object>>
                when Effect != "Deny" {
                    NotResource !exists OR NotAction !exists <<Policies should not have both NotResource and NotAction>>

                    when Action exists {
                        when Action is_string {
                            when Action == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                NotResource !exists <<PassRole should not be combined with NotResource>>
                                Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                            }
                        }
                        when Action is_list {
                            when Action[*] == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                NotResource !exists <<PassRole should not be combined with NotResource>>
                                Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                            }
                        }
                    }

                    when NotAction exists {
                        Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using NotAction>>
                    }
                }
            }
        }
    }
}
