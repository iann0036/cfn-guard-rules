let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]
let iam_users = Resources.*[ Type == 'AWS::IAM::User' ]
let iam_groups = Resources.*[ Type == 'AWS::IAM::Group' ]
let iam_policies = Resources.*[ Type == 'AWS::IAM::Policy' ]
let iam_managedpolicies = Resources.*[ Type == 'AWS::IAM::ManagedPolicy' ]

rule IAM_AccessKey_Disallow {
    Resources.*.Type != /AWS::IAM::AccessKey/ <<IAM Acces Keys are disallowed>>
}

rule IAM_Role_AssumeRolePolicy when %iam_roles !empty {
    when %iam_roles.Properties.AssumeRolePolicyDocument exists {
        %iam_roles.Properties.AssumeRolePolicyDocument is_struct <<Inline policies are not permitted, use an object instead>>
        %iam_roles.Properties.AssumeRolePolicyDocument {
            Version == "2012-10-17" <<Version must be 2012-10-17>>
            Statement is_list <<Statement must be a list>>
            Statement[*] {
                this is_struct <<Statement items must be an object>>
                when Effect != "Deny" {
                    NotPrincipal !exists <<NotPrincipal should not be used in an Allow statement to prevent overly permissive permissions>>
                    Principal is_struct <<Principal should not be an object and must not be a wildcard>>
                    Principal.Federated !exists <<Federated access to this resource is not permitted>>
                    when Principal.AWS exists {
                        Principal.AWS == /^(arn:aws:iam::\d{12}:.+|\d{12}|arn:aws:sts::\d{12}:assumed-role\/.+)$/ <<Principal must not have wildcards>>
                    }
                }
            }
        }
    }
}

rule IAM_Role_Policies when %iam_roles !empty {
    when %iam_roles.Properties.Policies exists {
        %iam_roles.Properties.Policies[*] {
            PolicyDocument is_struct <<Inline policies are not permitted, use an object instead>>
            PolicyDocument {
                Version == "2012-10-17" <<Version must be 2012-10-17>>
                Statement is_list <<Statement must be a list>>
                Statement[*] {
                    this is_struct <<Statement items must be an object>>
                    when Effect != "Deny" {
                        NotResource !exists OR NotAction !exists <<Policies should not have both NotResource and NotAction>>

                        when Action exists {
                            when Action is_string {
                                when Action == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                    NotResource !exists <<PassRole should not be combined with NotResource>>
                                    Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                                }
                            }
                            when Action is_list {
                                when Action[*] == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                    NotResource !exists <<PassRole should not be combined with NotResource>>
                                    Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                                }
                            }
                        }

                        when NotAction exists {
                            Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using NotAction>>
                        }
                    }
                }
            }
        }
    }
}

rule IAM_Group_Policies when %iam_groups !empty {
    when %iam_groups.Properties.Policies exists {
        %iam_groups.Properties.Policies[*] {
            PolicyDocument is_struct <<Inline policies are not permitted, use an object instead>>
            PolicyDocument {
                Version == "2012-10-17" <<Version must be 2012-10-17>>
                Statement is_list <<Statement must be a list>>
                Statement[*] {
                    this is_struct <<Statement items must be an object>>
                    when Effect != "Deny" {
                        NotResource !exists OR NotAction !exists <<Policies should not have both NotResource and NotAction>>

                        when Action exists {
                            when Action is_string {
                                when Action == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                    NotResource !exists <<PassRole should not be combined with NotResource>>
                                    Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                                }
                            }
                            when Action is_list {
                                when Action[*] == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                    NotResource !exists <<PassRole should not be combined with NotResource>>
                                    Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                                }
                            }
                        }

                        when NotAction exists {
                            Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using NotAction>>
                        }
                    }
                }
            }
        }
    }
}

rule IAM_User_Policies when %iam_users !empty {
    when %iam_users.Properties.Policies exists {
        %iam_users.Properties.Policies[*] {
            PolicyDocument is_struct <<Inline policies are not permitted, use an object instead>>
            PolicyDocument {
                Version == "2012-10-17" <<Version must be 2012-10-17>>
                Statement is_list <<Statement must be a list>>
                Statement[*] {
                    this is_struct <<Statement items must be an object>>
                    when Effect != "Deny" {
                        NotResource !exists OR NotAction !exists <<Policies should not have both NotResource and NotAction>>

                        when Action exists {
                            when Action is_string {
                                when Action == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                    NotResource !exists <<PassRole should not be combined with NotResource>>
                                    Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                                }
                            }
                            when Action is_list {
                                when Action[*] == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                    NotResource !exists <<PassRole should not be combined with NotResource>>
                                    Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                                }
                            }
                        }

                        when NotAction exists {
                            Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using NotAction>>
                        }
                    }
                }
            }
        }
    }
}

rule IAM_Policy_PolicyDocument when %iam_policies !empty {
    when %iam_policies.Properties.PolicyDocument exists {
        %iam_policies.Properties.PolicyDocument is_struct <<Inline policies are not permitted, use an object instead>>
        %iam_policies.Properties.PolicyDocument {
            Version == "2012-10-17" <<Version must be 2012-10-17>>
            Statement is_list <<Statement must be a list>>
            Statement[*] {
                this is_struct <<Statement items must be an object>>
                when Effect != "Deny" {
                    NotResource !exists OR NotAction !exists <<Policies should not have both NotResource and NotAction>>

                    when Action exists {
                        when Action is_string {
                            when Action == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                NotResource !exists <<PassRole should not be combined with NotResource>>
                                Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                            }
                        }
                        when Action is_list {
                            when Action[*] == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                NotResource !exists <<PassRole should not be combined with NotResource>>
                                Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                            }
                        }
                    }

                    when NotAction exists {
                        Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using NotAction>>
                    }
                }
            }
        }
    }
}

rule IAM_ManagedPolicy_PolicyDocument when %iam_managedpolicies !empty {
    when %iam_managedpolicies.Properties.PolicyDocument exists {
        %iam_managedpolicies.Properties.PolicyDocument is_struct <<Inline policies are not permitted, use an object instead>>
        %iam_managedpolicies.Properties.PolicyDocument {
            Version == "2012-10-17" <<Version must be 2012-10-17>>
            Statement is_list <<Statement must be a list>>
            Statement[*] {
                this is_struct <<Statement items must be an object>>
                when Effect != "Deny" {
                    NotResource !exists OR NotAction !exists <<Policies should not have both NotResource and NotAction>>

                    when Action exists {
                        when Action is_string {
                            when Action == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                NotResource !exists <<PassRole should not be combined with NotResource>>
                                Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                            }
                        }
                        when Action is_list {
                            when Action[*] == /(?i)(^\*$)|(^iam:[P\?][a\?][s\?][s\?][R\?][o\?][l\?][e\/?]$)|(^iam:([P\?]([a\?]([s\?]([s\?]([R\?]([o\?]([l\?]([e\/?])?)?)?)?)?)?)?)?\*)/ {
                                NotResource !exists <<PassRole should not be combined with NotResource>>
                                Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using PassRole>>
                            }
                        }
                    }

                    when NotAction exists {
                        Resource == /^[^\*\?]+$/ <<Resource should not contain wildcards when using NotAction>>
                    }
                }
            }
        }
    }
}
